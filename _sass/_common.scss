* {
  //border: 1px solid red;
}
body {
  box-sizing: border-box !important;
  background-color: $color-light;
}
img {
  max-width: 100%;
  object-fit: cover;
}
figure > img {
  display: block;
}

a {
  text-decoration: none;
  color: $color-dark;
  transition: opacity 300ms ease;
  &.category_old {
    background-color: $color-accent;
    color: readable-color($color-accent);
    padding-inline: 5px;
  }
  &.subcategory_old {
    background-color: $color-success;
    color: readable-color($color-success);
  }
  &.tag {
    text-decoration: none !important; // we need this as tag is also used in post body where a is set to underline
    padding-inline: calc($gap-default/2);
    font-size: 1.2rem;
    background-color: $color-accent2;
    color: readable-color($color-accent2);
    border-radius: 32px;
  }
  &:hover {
    opacity: 0.8;
  }
}
section {
  margin-block: $gap-default * 5 !important;
}
.svg-icon {
  width: 16px;
  height: 16px;
  display: inline-block;
  fill: #aaa;
  padding-right: calc($gap-default/2);
  vertical-align: text-top;
}
.container {
  //width: min($container-width, 100%);
  max-width: $container-width;
  margin: 0 auto;
  padding-inline: $gap-default;
}
.grid {
  grid-column-gap: $gap-default;
  grid-row-gap: $gap-default;
  display: grid;
  grid-template-columns: 1fr;
  &-2 {
    grid-template-columns: 1fr 1fr;
  }
  @include tab {
    grid-template-columns: repeat(auto-fit, minmax(0%, 1fr));
  }

  & > * {
    min-width: 0; // HACK for childs in overflow
  }
}

.feather {
  width: 1rem;
  height: 1rem;
  stroke: $color-dark;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
  fill: none;
  vertical-align: text-top;
}

details {
  margin-block-end: $gap-default;
  background-color: #fff;
  padding: $gap-default;
  display: block;
  summary {
    cursor: pointer;
    font-size: 1.2rem;
    list-style-type: "â¬‡ ";
    &::marker {
      color: #e162bf;

      display: block;
    }
  }
}

.tag-cloud {
  list-style: none;
  padding: 0;
  li {
    display: inline-block;
    margin: 0;
  }
}

.tabbed {
  overflow-x: hidden; /* so we could easily hide the radio inputs */
  padding-bottom: $gap-default;
}

.tabbed [type="radio"] {
  /* hiding the inputs */
  display: none;
}

.tabs {
  display: flex;
  align-items: stretch;
  list-style: none;
  padding: 0;
  border-bottom: 1px solid $color-primary;
}

.tab > label {
  display: block;
  margin-bottom: -1px;
  padding: calc($gap-default/2) $gap-default;
  border: 1px solid $color-primary;
  background: $color-light;
  color: readable-color($color-light);
  cursor: pointer;
  transition: all 0.3s;
}
.tab:hover label {
  border-top-color: #333;
  color: #333;
}

.tab-content {
  display: none;
  color: #777;
}

/* As we cannot replace the numbers with variables or calls to element properties, the number of this selector parts is our tab count limit */
.tabbed [type="radio"]:nth-of-type(1):checked ~ .tabs .tab:nth-of-type(1) label,
.tabbed [type="radio"]:nth-of-type(2):checked ~ .tabs .tab:nth-of-type(2) label,
.tabbed [type="radio"]:nth-of-type(3):checked ~ .tabs .tab:nth-of-type(3) label,
.tabbed [type="radio"]:nth-of-type(4):checked ~ .tabs .tab:nth-of-type(4) label,
.tabbed
  [type="radio"]:nth-of-type(5):checked
  ~ .tabs
  .tab:nth-of-type(5)
  label {
  border-bottom-color: #fff;
  border-top-color: $color-primary;
  background: #fff;
}

.tabbed [type="radio"]:nth-of-type(1):checked ~ .tab-content:nth-of-type(1),
.tabbed [type="radio"]:nth-of-type(2):checked ~ .tab-content:nth-of-type(2),
.tabbed [type="radio"]:nth-of-type(3):checked ~ .tab-content:nth-of-type(3),
.tabbed [type="radio"]:nth-of-type(4):checked ~ .tab-content:nth-of-type(4) {
  display: block;
}

a.category {
  padding: 0;
  position: relative;
  display: inline-block;
  color: $color-dark; // Text color
  text-decoration: none;
  background-image: linear-gradient(
    $color-accent 0%,
    $color-accent 100%
  ); // Solid background color
  background-size: 100% 20%; // Initial underline size
  background-position: 0 100%; // Position at the bottom
  background-repeat: no-repeat;
  transition: all 0.2s ease;
  &-light {
    color: $color-light;
  }
  &-sub {
    background-image: linear-gradient($color-success 0%, $color-success 100%);
    &:hover {
      color: readable-color($color-success);
    }
  }
  &:hover {
    background-size: 100% 100%; // Expand to full background height on hover
    color: readable-color($color-accent);
  }
}
